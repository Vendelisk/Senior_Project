<%include partials/header.ejs%>
<br>
<section class="core-wrapper" data-section="home" data-stellar-background-ratio="0.5">
  <div class="gradient"></div>
  <div id="console" style="z-index: -3"></div>

  <div class="space stars"></div>

  <div class="terminal-container">
    <div id="output-box" class="terminal">
      <pre id="output" class="terminal-output"></pre>
      <input type="text" id="myInput" />
    </div>
    <div class="button-row">
      <div><button id="btn_run" class="btn btn-primary2">RUN PROGRAM</a></div>
      <div><button id="btn_clr" class="btn btn-primary2">CLEAR</button></div>
      <div><button id="btn_stp" class="btn btn-primary2">STOP</button></div>
    </div>
  </div>
  <h4 align="center" style="color:darkgreen">Code Written By: <%= username %></h4>
</section>

<script>
  let isConnected = false;
  let isrunning = false;
  let sendBuffer = "";

  window.onload = () => {
    //btn_lang = document.getElementById("btn_lang");
    btn_run = document.getElementById("btn_run");
    btn_clr = document.getElementById("btn_clr");
    btn_stp = document.getElementById("btn_stp");
    output = document.getElementById("output");
    input = document.getElementById("myInput");

    console.log("test");

    username = "<%= username %>";
    progName = "<%= prog.name %>";
    file = "<%= prog.file %>";
    path = "<%= prog.path %>";

    let url = `ws://codex-exe.cs.wwu.edu/console/${username}/${progName}:8000`;
    connection = new WebSocket(url);
    connection.onopen = function () {
      console.log(`Connection status: ${connection.readyState}, ${connection.url}`);
      //connection.send(`New Client Connected for project ${username}/${progName}.`);
      isConnected = true;
    }
    //console.log("Connected, setting events");

    //btn_lang.addEventListener("click", changeLang);
    btn_run.addEventListener("click", runCode);
    btn_clr.addEventListener("click", clearOutput);
    btn_stp.addEventListener("click", interrupt);
    input.addEventListener("keydown", recordInput);

    connection.onmessage = event => {
    /*dummy message logs: move to outside the window.onload and uncomment if testing
    //plain message sending
    console.log(event.data);
    output = document.getElementById("output");
    output.innerHTML += event.data;
    output.innerHTML += "\n";
    */
    //my example python message handler.
    let message = JSON.parse(event.data);
    switch (message.event) {

      case "stdout":
        output.innerHTML += message.payload;
        //output.innerHTML += "\n";
        updateScroll();
        break;

      case "cexit":
        console.log(message.payload)
        if(message)
        runJava();
        break;  

      case "exit":
        isrunning = false;
        //console.log(message.payload);
        if (message.payload == 0) {
          //alert("The program has finished running.");
          output.innerHTML += "\n[The program has finished running]\n"
        }
        else if (message.payload == 1) {
          alert("The program has stopped due to an error or interrupt. Click Run to try again");
        }
        break;

      case "keepAlive":
        keepAlive();
        break;
    }
  };

  connection.onclose = function (event) {
    isConnected = false;
  }

  //If there is any error the onerror function callback is called
  connection.onerror = error => {
    console.log('WebSocket error: ' + error);
  }

  };
  //java -cp /var/www/senior_project/views/Users/kimbalm24/testjv/ javaTest
  function runCode() {
    //console.log("Run Program pressed");
    //console.log("running: "+`${path}`);
    var programdetails = determineLanguage();
    var lang = programdetails.lang;
    var fName = programdetails.file;
    //console.log(lang);

    if(lang == "error"){
      alert("Error in file upload, file not recognized as a .py or .java, please re-upload project.");
      return;
    }
  
    document.getElementById("output").innerHTML = "";
    if(lang == "java"){
      output.innerHTML += "[Loading the program]\n"
      //var path = `${path}`;
      // //run command works right now
      // let obj = {
      //   "event": "run",
      //   "payload": `java -cp `+ programdetails.dir +" "+ fName
      // }
      //this one doesn't --> need sudo privleges to compile?
      let obj2 = {
        "event": "compile",
        "payload": `javac `+programdetails.path
      }
      //might need to make this synchronous 
      mySend(obj2);
      //mySend(obj); moved to cexit case
    }
    else{
      console.log(programdetails)
      let pyobj = {
        "event": "run",
        "payload": `python3 `+programdetails.path//${path} is undefined here
      }
      console.log(pyobj)
      mySend(pyobj);
    }
   
    isrunning = true;
  }


  function determineLanguage(){
    var pathstr = `${path}`;
    console.log(pathstr);
    var strArr = pathstr.split("/")
    var progStr = strArr[strArr.length-1];
    var dirStr = strArr[0]+"/";
    for(i = 1; i < strArr.length-1;i++){
      dirStr += strArr[i]+"/";
    }
    console.log(dirStr);
    var strippedProg = progStr.split(".")

    if(progStr.includes(".py")){
      return {lang : "python",
              path : pathstr};
    }
    else if(progStr.includes(".java")){
      return {
        lang : "java",
        file : strippedProg[0], // get the java file name without the .java --> needed to run: java <filename>
        dir : dirStr,
        path : pathstr};
    }
    else return "error";
  }
  function clearOutput() {
    //console.log("Clear pressed");
    document.getElementById("output").innerHTML = "";
  }

  function mySend(payload) {
    // console.log("Sending payload: ${JSON.stringify(payload)}");
    connection.send(JSON.stringify(payload));
  }

  function recordInput(event) {

    if (event.key === "Enter") {
      return eof();
    }
    else if (event.key === "Backspace") {
      sendBuffer = sendBuffer.slice(0, sendBuffer.length-1)
    }
    else if (!isConnected) {
      return;
    }
    else if (!isrunning) {
      return;
    }
    else if (event.key.length > 1) {
      return;
    } else {
      sendBuffer += event.key;
    }
  }

  function eof() {

    //newline ();
    myInput.value = '';
    if (!isConnected) {
      alert("Connection lost, please refresh the page. If the problem continues, contact site administrator.")
      return;
    }
    if (!isrunning) {
      alert("Please start running the code before sending input.")
      return;
    }

    mySend({
      "event": "stdin",
      "payload": sendBuffer
    }); 

    mySend({
      "event": "EOF"
    });    

    sendBuffer = "";   
  }

  function keepAlive() {
    mySend({
      "event": "keepAlive",
      "payload": 'std'
    }); 
  }

  function interrupt() {
    mySend({
      "event": "signal",
      "payload": 'SIGINT'
    }); 
  }

  function updateScroll() {
    var element = document.getElementById("output-box");
    element.scrollTop = element.scrollHeight;
  }

  /*function changeLang() {
    document.getElementById("lang_drop").classList.toggle("show");
  }*/

  function langPython() {

  }

  function runJava() {

    var programdetails = determineLanguage();
    var lang = programdetails.lang;
    var fName = programdetails.file;
     //run command works right now
     let obj = {
        "event": "run",
        "payload": `java -cp `+ programdetails.dir +" "+ fName
      }

      mySend(obj);
  }

  function langC() {

  }

  // Close the dropdown if the user clicks outside of it
  window.onclick = function(event) {
    if (!event.target.matches('#btn_lang')) {
      var dropdowns = document.getElementsByClassName("dropdown-content");
      var i;
      for (i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];
        if (openDropdown.classList.contains('show')) {
          openDropdown.classList.remove('show');
        }
      }
    }
  }

</script>

<%include partials/footer.ejs%>
